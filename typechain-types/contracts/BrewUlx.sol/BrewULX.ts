/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface BrewULXInterface extends utils.Interface {
  functions: {
    "BOUNTY_FEE()": FunctionFragment;
    "addAuth(address)": FunctionFragment;
    "anyAuth()": FunctionFragment;
    "authorized(uint256)": FunctionFragment;
    "bridgeRoute(uint256)": FunctionFragment;
    "bridgeRouteAmount()": FunctionFragment;
    "checkedConvertMultiple(address[],address[],uint256[])": FunctionFragment;
    "convertMultiple(address[],address[])": FunctionFragment;
    "devAddr()": FunctionFragment;
    "devCut()": FunctionFragment;
    "factory()": FunctionFragment;
    "isAuth(address)": FunctionFragment;
    "lastRoute(address)": FunctionFragment;
    "overrideSlippage(address)": FunctionFragment;
    "overrode(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "revokeAuth(address)": FunctionFragment;
    "setAnyAuth()": FunctionFragment;
    "setBridge(address,address)": FunctionFragment;
    "setBridgeRoute(uint256,address)": FunctionFragment;
    "setBridgeRouteAmount(uint256)": FunctionFragment;
    "setDevAddr(address)": FunctionFragment;
    "setDevCut(uint256)": FunctionFragment;
    "setSlippage(uint256)": FunctionFragment;
    "swapper()": FunctionFragment;
    "swapperApproved(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "xULX()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BOUNTY_FEE"
      | "addAuth"
      | "anyAuth"
      | "authorized"
      | "bridgeRoute"
      | "bridgeRouteAmount"
      | "checkedConvertMultiple"
      | "convertMultiple"
      | "devAddr"
      | "devCut"
      | "factory"
      | "isAuth"
      | "lastRoute"
      | "overrideSlippage"
      | "overrode"
      | "owner"
      | "renounceOwnership"
      | "revokeAuth"
      | "setAnyAuth"
      | "setBridge"
      | "setBridgeRoute"
      | "setBridgeRouteAmount"
      | "setDevAddr"
      | "setDevCut"
      | "setSlippage"
      | "swapper"
      | "swapperApproved"
      | "transferOwnership"
      | "xULX"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BOUNTY_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAuth",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "anyAuth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "authorized",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeRoute",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeRouteAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkedConvertMultiple",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "convertMultiple",
    values: [PromiseOrValue<string>[], PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(functionFragment: "devAddr", values?: undefined): string;
  encodeFunctionData(functionFragment: "devCut", values?: undefined): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isAuth",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lastRoute",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "overrideSlippage",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "overrode",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAuth",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAnyAuth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBridge",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBridgeRoute",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBridgeRouteAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDevAddr",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDevCut",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSlippage",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "swapper", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "swapperApproved",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "xULX", values?: undefined): string;

  decodeFunctionResult(functionFragment: "BOUNTY_FEE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addAuth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "anyAuth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "authorized", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bridgeRoute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgeRouteAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkedConvertMultiple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertMultiple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "devAddr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "devCut", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isAuth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lastRoute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "overrideSlippage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "overrode", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeAuth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAnyAuth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBridge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBridgeRoute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBridgeRouteAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setDevAddr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setDevCut", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSlippage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapperApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "xULX", data: BytesLike): Result;

  events: {
    "LogBridgeSet(address,address)": EventFragment;
    "LogConvert(address,address,uint256,uint256)": EventFragment;
    "LogSetAnyAuth()": EventFragment;
    "LogSlippageOverrode(address)": EventFragment;
    "LogToggleOverrode(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SetDevAddr(address)": EventFragment;
    "SetDevCut(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogBridgeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogConvert"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSetAnyAuth"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSlippageOverrode"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogToggleOverrode"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDevAddr"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDevCut"): EventFragment;
}

export interface LogBridgeSetEventObject {
  token: string;
  bridge: string;
}
export type LogBridgeSetEvent = TypedEvent<
  [string, string],
  LogBridgeSetEventObject
>;

export type LogBridgeSetEventFilter = TypedEventFilter<LogBridgeSetEvent>;

export interface LogConvertEventObject {
  server: string;
  token0: string;
  amount0: BigNumber;
  amountwULX: BigNumber;
}
export type LogConvertEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  LogConvertEventObject
>;

export type LogConvertEventFilter = TypedEventFilter<LogConvertEvent>;

export interface LogSetAnyAuthEventObject {}
export type LogSetAnyAuthEvent = TypedEvent<[], LogSetAnyAuthEventObject>;

export type LogSetAnyAuthEventFilter = TypedEventFilter<LogSetAnyAuthEvent>;

export interface LogSlippageOverrodeEventObject {
  _adr: string;
}
export type LogSlippageOverrodeEvent = TypedEvent<
  [string],
  LogSlippageOverrodeEventObject
>;

export type LogSlippageOverrodeEventFilter =
  TypedEventFilter<LogSlippageOverrodeEvent>;

export interface LogToggleOverrodeEventObject {
  _adr: string;
}
export type LogToggleOverrodeEvent = TypedEvent<
  [string],
  LogToggleOverrodeEventObject
>;

export type LogToggleOverrodeEventFilter =
  TypedEventFilter<LogToggleOverrodeEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SetDevAddrEventObject {
  _addr: string;
}
export type SetDevAddrEvent = TypedEvent<[string], SetDevAddrEventObject>;

export type SetDevAddrEventFilter = TypedEventFilter<SetDevAddrEvent>;

export interface SetDevCutEventObject {
  _amount: BigNumber;
}
export type SetDevCutEvent = TypedEvent<[BigNumber], SetDevCutEventObject>;

export type SetDevCutEventFilter = TypedEventFilter<SetDevCutEvent>;

export interface BrewULX extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BrewULXInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BOUNTY_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    addAuth(
      _auth: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    anyAuth(overrides?: CallOverrides): Promise<[boolean]>;

    authorized(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    bridgeRoute(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    bridgeRouteAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    checkedConvertMultiple(
      token0: PromiseOrValue<string>[],
      token1: PromiseOrValue<string>[],
      minimumBalances: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    convertMultiple(
      token0: PromiseOrValue<string>[],
      token1: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    devAddr(overrides?: CallOverrides): Promise<[string]>;

    devCut(overrides?: CallOverrides): Promise<[BigNumber]>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    isAuth(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastRoute(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    overrideSlippage(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    overrode(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeAuth(
      _auth: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAnyAuth(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBridge(
      token: PromiseOrValue<string>,
      bridge: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBridgeRoute(
      index: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBridgeRouteAmount(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDevAddr(
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDevCut(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSlippage(
      _amt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapper(overrides?: CallOverrides): Promise<[string]>;

    swapperApproved(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    xULX(overrides?: CallOverrides): Promise<[string]>;
  };

  BOUNTY_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  addAuth(
    _auth: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  anyAuth(overrides?: CallOverrides): Promise<boolean>;

  authorized(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  bridgeRoute(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  bridgeRouteAmount(overrides?: CallOverrides): Promise<BigNumber>;

  checkedConvertMultiple(
    token0: PromiseOrValue<string>[],
    token1: PromiseOrValue<string>[],
    minimumBalances: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  convertMultiple(
    token0: PromiseOrValue<string>[],
    token1: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  devAddr(overrides?: CallOverrides): Promise<string>;

  devCut(overrides?: CallOverrides): Promise<BigNumber>;

  factory(overrides?: CallOverrides): Promise<string>;

  isAuth(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastRoute(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  overrideSlippage(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  overrode(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeAuth(
    _auth: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAnyAuth(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBridge(
    token: PromiseOrValue<string>,
    bridge: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBridgeRoute(
    index: PromiseOrValue<BigNumberish>,
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBridgeRouteAmount(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDevAddr(
    _addr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDevCut(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSlippage(
    _amt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapper(overrides?: CallOverrides): Promise<string>;

  swapperApproved(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  xULX(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    BOUNTY_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    addAuth(
      _auth: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    anyAuth(overrides?: CallOverrides): Promise<boolean>;

    authorized(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    bridgeRoute(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    bridgeRouteAmount(overrides?: CallOverrides): Promise<BigNumber>;

    checkedConvertMultiple(
      token0: PromiseOrValue<string>[],
      token1: PromiseOrValue<string>[],
      minimumBalances: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    convertMultiple(
      token0: PromiseOrValue<string>[],
      token1: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    devAddr(overrides?: CallOverrides): Promise<string>;

    devCut(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<string>;

    isAuth(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastRoute(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    overrideSlippage(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    overrode(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    revokeAuth(
      _auth: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAnyAuth(overrides?: CallOverrides): Promise<void>;

    setBridge(
      token: PromiseOrValue<string>,
      bridge: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBridgeRoute(
      index: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBridgeRouteAmount(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDevAddr(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDevCut(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSlippage(
      _amt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    swapper(overrides?: CallOverrides): Promise<string>;

    swapperApproved(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    xULX(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "LogBridgeSet(address,address)"(
      token?: PromiseOrValue<string> | null,
      bridge?: PromiseOrValue<string> | null
    ): LogBridgeSetEventFilter;
    LogBridgeSet(
      token?: PromiseOrValue<string> | null,
      bridge?: PromiseOrValue<string> | null
    ): LogBridgeSetEventFilter;

    "LogConvert(address,address,uint256,uint256)"(
      server?: PromiseOrValue<string> | null,
      token0?: PromiseOrValue<string> | null,
      amount0?: null,
      amountwULX?: null
    ): LogConvertEventFilter;
    LogConvert(
      server?: PromiseOrValue<string> | null,
      token0?: PromiseOrValue<string> | null,
      amount0?: null,
      amountwULX?: null
    ): LogConvertEventFilter;

    "LogSetAnyAuth()"(): LogSetAnyAuthEventFilter;
    LogSetAnyAuth(): LogSetAnyAuthEventFilter;

    "LogSlippageOverrode(address)"(_adr?: null): LogSlippageOverrodeEventFilter;
    LogSlippageOverrode(_adr?: null): LogSlippageOverrodeEventFilter;

    "LogToggleOverrode(address)"(_adr?: null): LogToggleOverrodeEventFilter;
    LogToggleOverrode(_adr?: null): LogToggleOverrodeEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "SetDevAddr(address)"(_addr?: null): SetDevAddrEventFilter;
    SetDevAddr(_addr?: null): SetDevAddrEventFilter;

    "SetDevCut(uint256)"(_amount?: null): SetDevCutEventFilter;
    SetDevCut(_amount?: null): SetDevCutEventFilter;
  };

  estimateGas: {
    BOUNTY_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    addAuth(
      _auth: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    anyAuth(overrides?: CallOverrides): Promise<BigNumber>;

    authorized(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bridgeRoute(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bridgeRouteAmount(overrides?: CallOverrides): Promise<BigNumber>;

    checkedConvertMultiple(
      token0: PromiseOrValue<string>[],
      token1: PromiseOrValue<string>[],
      minimumBalances: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    convertMultiple(
      token0: PromiseOrValue<string>[],
      token1: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    devAddr(overrides?: CallOverrides): Promise<BigNumber>;

    devCut(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    isAuth(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastRoute(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    overrideSlippage(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    overrode(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeAuth(
      _auth: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAnyAuth(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBridge(
      token: PromiseOrValue<string>,
      bridge: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBridgeRoute(
      index: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBridgeRouteAmount(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDevAddr(
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDevCut(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSlippage(
      _amt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapper(overrides?: CallOverrides): Promise<BigNumber>;

    swapperApproved(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    xULX(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BOUNTY_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addAuth(
      _auth: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    anyAuth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    authorized(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bridgeRoute(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bridgeRouteAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkedConvertMultiple(
      token0: PromiseOrValue<string>[],
      token1: PromiseOrValue<string>[],
      minimumBalances: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    convertMultiple(
      token0: PromiseOrValue<string>[],
      token1: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    devAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    devCut(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isAuth(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastRoute(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    overrideSlippage(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    overrode(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeAuth(
      _auth: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAnyAuth(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBridge(
      token: PromiseOrValue<string>,
      bridge: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBridgeRoute(
      index: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBridgeRouteAmount(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDevAddr(
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDevCut(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSlippage(
      _amt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapperApproved(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    xULX(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
